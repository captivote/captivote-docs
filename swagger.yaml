swagger: "2.0"
info:
  description: "Cool server for Captivote/JudeBox/Guiltbox. Using REST API. Written on Swagger"
  version: "1.0.0"
  title: "Captivote"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "captivote.complicated.io"
basePath: "/api"
tags:
- name: "question_arsenal"
  description: "Everything about your QuestionArsenal"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "question"
  description: "Operations about questions"
- name: "answer"
  description: "Operations about answer"
- name: "vote"
  description: "Access to vote"
- name: "votee"
  description: "Access to votee"
- name: "user"
  description: "Access to user"
- name: "room"
  description: "Access to room"
- name: "score"
  description: "Access to score"
  externalDocs:
schemes:
- "https"
- "http"
paths:
  /question_arsenal:
    post:
      tags:
      - "question_arsenal"
      summary: "Create a question arsenal"
      description: ""
      operationId: "addQuestionArsenal"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "QuestionArsenal object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/QuestionArsenal"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /question_arsenal/{questionArsenalId}:
    get:
      tags:
      - "question_arsenal"
      summary: "Find QuestionArsenal by ID"
      description: "Returns a single QuestionArsenal"
      operationId: "getQuestionArsenalById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "questionArsenalId"
        in: "path"
        description: "ID of questionArsenalId to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/QuestionArsenal"
        400:
          description: "Invalid ID supplied"
        404:
          description: "QuestionArsenal not found"
      security:
      - api_key: []
  /question:
    post:
      tags:
      - "question"
      summary: "Create a question"
      description: ""
      operationId: "addQuestion"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Question object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/Question"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /question/{questionId}:
    get:
      tags:
      - "question"
      summary: "Find question by ID"
      description: "Returns a single Question"
      operationId: "getQuestionById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "questionId"
        in: "path"
        description: "ID of question to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Question"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Question not found"
      security:
      - api_key: []
  /answer:
    post:
      tags:
      - "answer"
      summary: "Create an answer"
      description: ""
      operationId: "addAnswer"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Answer object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/Answer"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /answer/{answerId}:
    get:
      tags:
      - "answer"
      summary: "Find answer by ID"
      description: "Returns a single answer"
      operationId: "getAnswerById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "answerId"
        in: "path"
        description: "ID of answer to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Answer"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Answer not found"
      security:
      - api_key: []
  /vote:
    post:
      tags:
      - "vote"
      summary: "Create a vote"
      description: ""
      operationId: "addVote"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "vote object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/Vote"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /vote/{voteId}:
    get:
      tags:
      - "vote"
      summary: "Find Vote by ID"
      description: "Returns a single Vote"
      operationId: "getVoteById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "voteId"
        in: "path"
        description: "ID of vote to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Vote"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Vote not found"
      security:
      - api_key: []
  /votee:
    post:
      tags:
      - "votee"
      summary: "Create a votee"
      description: ""
      operationId: "addVotee"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "votee object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/Votee"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /votee/{voteeId}:
    get:
      tags:
      - "votee"
      summary: "Find votee by ID"
      description: "Returns a single Votee"
      operationId: "getVoteeById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "voteeId"
        in: "path"
        description: "ID of votee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Votee"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Votee not found"
      security:
      - api_key: []
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "addUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "user not found"
      security:
      - api_key: []
    put:
      tags:
      - "user"
      summary: "Update user by ID"
      description: "Returns a single user"
      operationId: "putUserById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        204:
          description: "No Content"
        404:
          description: "User not found"
      security:
      - api_key: []
  /users:
    get:
      tags:
      - "user"
      summary: "Find all users"
      description: "Returns all user"
      operationId: "getAllUsers"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "User not found"
      security:
      - api_key: []
  /room:
    post:
      tags:
      - "room"
      summary: "Create a room"
      description: ""
      operationId: "addRoom"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Room object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/Room"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /room/{roomId}:
    get:
      tags:
      - "room"
      summary: "Find room by ID"
      description: "Returns a single room"
      operationId: "getRoomById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "ID of room to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Room"
        400:
          description: "Invalid ID supplied"
        404:
          description: "room not found"
      security:
      - api_key: []
  /score:
    post:
      tags:
      - "score"
      summary: "Create a score"
      description: ""
      operationId: "addScore"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Score object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/Score"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /score/{scoreId}:
    get:
      tags:
      - "score"
      summary: "Find score by ID"
      description: "Returns a single score"
      operationId: "getScoreById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "scoreId"
        in: "path"
        description: "ID of score to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Score"
        400:
          description: "Invalid ID supplied"
        404:
          description: "score not found"
      security:
      - api_key: []
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  QuestionArsenal:
    type: "object"
    required:
      - "question_arsenal_id"
      - "room_id"
    properties:
      question_arsenal_id:
        type: "integer"
        format: "int64"
      room_id:
        type: "integer"
        format: "int64"
    xml:
      name: "QuestionArsenal"
  Question:
    type: "object"
    required:
      - "question_id"
      - "content"
      - "author"
    properties:
      question_id:
        type: "integer"
        format: "int64"
      content:
        type: "string"
      author:
        type: "string"
        example: "user email"
      timer:
        type: "integer"
        format: "int64"
      question_arsenal_id:
        type: "integer"
        format: "int64"
    xml:
      name: "Question"
  Answer:
    type: "object"
    required:
      - "answer_id"
      - "parent"
      - "content"
    properties:
      answer_id:
        type: "integer"
        format: "int64"
      parent:
        type: "integer"
        format: "int64"
        example: "question_id"
      content:
        type: "string"
    xml:
      name: "Question"
  Vote:
    type: "object"
    required:
      - "vote_id"
      - "type"
      - "parent"
      - "up_votes"
      - "down_votes"
    properties:
      vote_id:
        type: "integer"
        format: "int64"
      q_or_a_id:
        type: "integer"
        format: "int64"
        example: "question_id | answer_id"
      parent:
        type: "integer"
        format: "int64"
        example: "question_id"
      up_votes:
        type: "integer"
        format: "int64"
      down_votes:
        type: "integer"
        format: "int64"
    xml:
      name: "Vote"
  Votee:
    type: "object"
    required:
      - "votee_id"
      - "user"
      - "vote"
      - "parent"
    properties:
      vote_id:
        type: "integer"
        format: "int64"
      user:
        type: "string"
        example: "user.email"
      vote:
        type: "integer"
        format: "int64"
      parent:
        type: "integer"
        format: "int64"
        example: "vote_id"
    xml:
      name: "Votee"
  User:
    type: "object"
    required:
      - "email"
      - "password"
      - "alias"
    properties:
      email:
        type: "string"
      password:
        type: "string"
      title:
        type: "string"
      roles:
        type: "array"
        items:
          type: "string"
      alias:
        type: "string"
    xml:
      name: "User"
  Room:
    type: "object"
    required:
      - "name"
      - "owner"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      user_limit:
        type: "integer"
        format: "int64"
      owner:
        type: "string"
    xml:
      name: "Room"
  Score:
    type: "object"
    required:
    - "question_id"
    - "email"
    - "votes"
    properties:
      question_id:
        type: "integer"
        format: "int64"
      email:
        type: "string"
      votes:
        type: "integer"
        format: "int64"
    xml:
      name: "Score"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"